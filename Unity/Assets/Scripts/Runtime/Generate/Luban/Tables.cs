//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Cysharp.Threading.Tasks;
using Game.Config.StarForce;
using Luban;
using SimpleJSON;

namespace Game.Config
{
    public partial class Tables
    {
        public TbAircraft TbAircraft { private set; get; }
        public TbArmor TbArmor { private set; get; }
        public TbAsteroid TbAsteroid { private set; get; }
        public TbEntity TbEntity { private set; get; }
        public TbMusic TbMusic { private set; get; }
        public TbScene TbScene { private set; get; }
        public TbSound TbSound { private set; get; }
        public TbThruster TbThruster { private set; get; }
        public TbUIForm TbUIForm { private set; get; }
        public TbUISound TbUISound { private set; get; }
        public TbWeapon TbWeapon { private set; get; }
        private Dictionary<string, IDataTable> _tables;
        public IEnumerable<IDataTable> DataTables => _tables.Values;

        public IDataTable GetDataTable(string tableName)
        {
            return _tables.TryGetValue(tableName, out var v) ? v : null;
        }

        public async UniTask LoadAsync(Func<string, UniTask<JSONNode>> loader)
        {
            _tables = new Dictionary<string, IDataTable>();
            var loadTasks = new List<UniTask>();

            TbAircraft = new TbAircraft(() => loader("starforce_tbaircraft"));
            loadTasks.Add(TbAircraft.LoadAsync());
            _tables.Add("StarForce.TbAircraft", TbAircraft);
            TbArmor = new TbArmor(() => loader("starforce_tbarmor"));
            loadTasks.Add(TbArmor.LoadAsync());
            _tables.Add("StarForce.TbArmor", TbArmor);
            TbAsteroid = new TbAsteroid(() => loader("starforce_tbasteroid"));
            loadTasks.Add(TbAsteroid.LoadAsync());
            _tables.Add("StarForce.TbAsteroid", TbAsteroid);
            TbEntity = new TbEntity(() => loader("starforce_tbentity"));
            loadTasks.Add(TbEntity.LoadAsync());
            _tables.Add("StarForce.TbEntity", TbEntity);
            TbMusic = new TbMusic(() => loader("starforce_tbmusic"));
            loadTasks.Add(TbMusic.LoadAsync());
            _tables.Add("StarForce.TbMusic", TbMusic);
            TbScene = new TbScene(() => loader("starforce_tbscene"));
            loadTasks.Add(TbScene.LoadAsync());
            _tables.Add("StarForce.TbScene", TbScene);
            TbSound = new TbSound(() => loader("starforce_tbsound"));
            loadTasks.Add(TbSound.LoadAsync());
            _tables.Add("StarForce.TbSound", TbSound);
            TbThruster = new TbThruster(() => loader("starforce_tbthruster"));
            loadTasks.Add(TbThruster.LoadAsync());
            _tables.Add("StarForce.TbThruster", TbThruster);
            TbUIForm = new TbUIForm(() => loader("starforce_tbuiform"));
            loadTasks.Add(TbUIForm.LoadAsync());
            _tables.Add("StarForce.TbUIForm", TbUIForm);
            TbUISound = new TbUISound(() => loader("starforce_tbuisound"));
            loadTasks.Add(TbUISound.LoadAsync());
            _tables.Add("StarForce.TbUISound", TbUISound);
            TbWeapon = new TbWeapon(() => loader("starforce_tbweapon"));
            loadTasks.Add(TbWeapon.LoadAsync());
            _tables.Add("StarForce.TbWeapon", TbWeapon);

            await UniTask.WhenAll(loadTasks);

            Refresh();
        }

        private void ResolveRef()
        {
            TbAircraft.ResolveRef(this);
            TbArmor.ResolveRef(this);
            TbAsteroid.ResolveRef(this);
            TbEntity.ResolveRef(this);
            TbMusic.ResolveRef(this);
            TbScene.ResolveRef(this);
            TbSound.ResolveRef(this);
            TbThruster.ResolveRef(this);
            TbUIForm.ResolveRef(this);
            TbUISound.ResolveRef(this);
            TbWeapon.ResolveRef(this);
        }

        public void Refresh()
        {
            PostInit();
            ResolveRef();
        }

        partial void PostInit();
    }
}